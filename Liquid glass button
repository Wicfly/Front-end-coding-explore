import { addPropertyControls, ControlType } from "framer"
import { useRef } from "react"
import { motion } from "framer-motion"
import * as PhosphorIcons from "phosphor-react"

interface LiquidGlassButtonProps {
    text: string
    backgroundColor: string
    textColor: string
    blurOpacity: number
    blurAmount: number
    wrapStrength: number
    borderRadius: number
    font: any
    iconName: string
    iconWeight: string
    iconColor: string
    iconSize: number
    outerBorderColor: string
    outerBorderOpacity: number
    innerBorderColor: string
    innerBorderOpacity: number
    shadow: boolean
    padding: number
    paddingLeft: number
    paddingRight: number
    paddingTop: number
    paddingBottom: number
    onClick?: () => void
    style?: React.CSSProperties
}

function hexToRGB(hex: string) {
    const r = parseInt(hex.slice(1, 3), 16)
    const g = parseInt(hex.slice(3, 5), 16)
    const b = parseInt(hex.slice(5, 7), 16)
    return `${r},${g},${b}`
}

/**
 * LiquidGlass Button with font and Phosphor icon option
 *
 * @framerIntrinsicWidth 200
 * @framerIntrinsicHeight 60
 * @framerSupportedLayoutWidth auto
 * @framerSupportedLayoutHeight auto
 */
export default function LiquidGlassButton(props: LiquidGlassButtonProps) {
    const {
        text,
        backgroundColor,
        textColor,
        blurOpacity,
        blurAmount,
        wrapStrength,
        borderRadius,
        font,
        iconName,
        iconWeight,
        iconColor,
        outerBorderColor,
        outerBorderOpacity,
        innerBorderColor,
        innerBorderOpacity,
        shadow,
        padding,
        paddingLeft,
        paddingRight,
        paddingTop,
        paddingBottom,
        onClick,
        style,
    } = props

    const buttonRef = useRef<HTMLDivElement>(null)

    // Calculate padding values
    const padLeft = paddingLeft ?? padding
    const padRight = paddingRight ?? padding
    const padTop = paddingTop ?? padding
    const padBottom = paddingBottom ?? padding

    return (
        <motion.div
            ref={buttonRef}
            onClick={onClick}
            style={{
                position: "relative",
                overflow: "hidden",
                cursor: "pointer",
                borderRadius,
                width: "fit-content",
                height: "fit-content",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                boxShadow: shadow ? "0 2px 8px rgba(0,0,0,0.08)" : "none",
                border: `1px solid ${outerBorderColor}`,
                opacity: outerBorderOpacity,
                paddingLeft: padLeft,
                paddingRight: padRight,
                paddingTop: padTop,
                paddingBottom: padBottom,
                ...style,
            }}
            whileHover={{ scale: 1.05 }}
            transition={{ type: "spring", stiffness: 400, damping: 10 }}
        >
            <svg style={{ display: "none" }}>
                <filter id="liquid-wrap-filter">
                    <feTurbulence
                        type="fractalNoise"
                        baseFrequency="0.02"
                        numOctaves="2"
                        seed="3"
                        result="turbulence"
                    />
                    <feComponentTransfer in="turbulence" result="tweak">
                        <feFuncR type="linear" slope="2" intercept="-0.5" />
                        <feFuncG type="linear" slope="2" intercept="-0.5" />
                        <feFuncB type="linear" slope="0" intercept="0" />
                    </feComponentTransfer>
                    <feGaussianBlur
                        in="tweak"
                        stdDeviation={blurAmount}
                        result="blurredMap"
                    />
                    <feDisplacementMap
                        in="SourceGraphic"
                        in2="blurredMap"
                        scale={wrapStrength}
                        xChannelSelector="R"
                        yChannelSelector="G"
                    />
                </filter>
            </svg>

            <div
                style={{
                    position: "absolute",
                    inset: 0,
                    backdropFilter: `blur(${blurAmount}px)`,
                    filter: "url(#liquid-wrap-filter)",
                    isolation: "isolate",
                }}
            />

            <div
                style={{
                    position: "absolute",
                    inset: 0,
                    background: backgroundColor,
                    opacity: blurOpacity,
                }}
            />

            <div
                style={{
                    position: "absolute",
                    inset: 0,
                    borderRadius,
                    border: `1px inset ${innerBorderColor}`,
                    opacity: innerBorderOpacity,
                    pointerEvents: "none",
                }}
            />

            <div
                style={{
                    position: "relative",
                    zIndex: 2,
                    color: textColor,
                    ...font,
                    fontWeight: 600,
                    textAlign: "center",
                    whiteSpace: "nowrap",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    gap: 8,
                }}
            >
                {/* Icon dari phosphor */}
                {PhosphorIcons[iconName] &&
                    (() => {
                        const IconComponent = PhosphorIcons[
                            iconName
                        ] as React.ElementType
                        return (
                            <IconComponent
                                size={props.iconSize || 18}
                                color={iconColor}
                                weight={iconWeight as any}
                            />
                        )
                    })()}
                {text}
            </div>
        </motion.div>
    )
}

addPropertyControls(LiquidGlassButton, {
    text: {
        type: ControlType.String,
        title: "Text Button",
        defaultValue: "Add to Cart",
    },
    font: {
        type: ControlType.Font,
        title: "Text Font",
        controls: "extended",
        defaultFontType: "sans-serif",
        defaultValue: {
            fontFamily: "Inter",
            fontSize: 18,
            fontWeight: 600,
            letterSpacing: "-0.1px",
            lineHeight: "18px",
        },
    },
    textColor: {
        type: ControlType.Color,
        title: "Text Color",
        defaultValue: "#FFFFFF",
    },
    iconName: {
        type: ControlType.String,
        title: "Phosphor Icon",
        defaultValue: "ShoppingCart",
        placeholder: "e.g. Star, Heart, User",
    },
    iconWeight: {
        type: ControlType.Enum,
        title: "Icon Weight",
        defaultValue: "fill",
        options: ["thin", "light", "regular", "bold", "fill", "duotone"],
    },
    iconColor: {
        type: ControlType.Color,
        title: "Icon Color",
        defaultValue: "#FFFFFF",
    },
    iconSize: {
        type: ControlType.Number,
        title: "Icon Size",
        defaultValue: 24,
        min: 1,
        max: 100,
        step: 1,
    },
    backgroundColor: {
        type: ControlType.Color,
        title: "Fill Color",
        defaultValue: "rgba(240,240,255,0.25)",
    },
    padding: {
        type: ControlType.FusedNumber,
        title: "Padding",
        defaultValue: 16,
        toggleKey: "paddingPerSide",
        toggleTitles: ["All Sides", "Per Side"],
        valueKeys: [
            "paddingTop",
            "paddingRight",
            "paddingBottom",
            "paddingLeft",
        ],
        valueLabels: ["T", "R", "B", "L"],
        min: 0,
        unit: "px",
    },
    borderRadius: {
        type: ControlType.Number,
        title: "Radius",
        defaultValue: 28,
        min: 0,
        max: 100,
        step: 1,
    },
    wrapStrength: {
        type: ControlType.Number,
        title: "Wrap Strength",
        defaultValue: 100,
        min: 0,
        max: 300,
        step: 1,
    },
    blurAmount: {
        type: ControlType.Number,
        title: "Blur",
        defaultValue: 4,
        min: 0,
        max: 20,
        step: 0.5,
    },
    blurOpacity: {
        type: ControlType.Number,
        title: "Blur Opacity",
        defaultValue: 0.3,
        min: 0,
        max: 1,
        step: 0.01,
    },
    outerBorderColor: {
        type: ControlType.Color,
        title: "Outer Border",
        defaultValue: "rgba(255,255,255,0.30)",
    },
    outerBorderOpacity: {
        type: ControlType.Number,
        title: "Outer Opacity",
        defaultValue: 1,
        min: 0,
        max: 1,
        step: 0.05,
    },
    innerBorderColor: {
        type: ControlType.Color,
        title: "Inner Border",
        defaultValue: "rgba(255,255,255,0.5)",
    },
    innerBorderOpacity: {
        type: ControlType.Number,
        title: "Inner Opacity",
        defaultValue: 1,
        min: 0,
        max: 1,
        step: 0.05,
    },
    shadow: {
        type: ControlType.Boolean,
        title: "Shadow",
        defaultValue: true,
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },
})
